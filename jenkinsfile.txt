pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = '777'  // ID des credentials DockerHub
        SONARQUBE_ENV = 'SonarQube-Server'          // Config SonarQube dans Jenkins
        NEXUS_URL = 'http://192.168.33.10/:8081/repository/maven-releases/'
       // NEXUS_CREDENTIALS = 'nexus-creds'           // ID des credentials Nexus
    }

    stages {
        stage('Récupération du projet') {
            steps {
                checkout scm
            }
        }

        stage('Compilation') {
            steps {
                  sh '''
                    chmod +x mvnw
                    ./mvnw clean package -DskipTests
                '''
            
            }
        }

        stage('Lancement des tests unitaires') {
            steps {
                sh './mvnw test'
            }
        }

        stage('Analyse de qualité SonarQube') {
            steps {
                
                    withSonarQubeEnv('SonarQube-Server') { // Ensure this matches your configured SonarQube server in Jenkins
                    withCredentials([string(credentialsId: 'sqa_2f18ac43bbf2f05d480c3f6f0a42368f1c5a0973', variable: 'SONAR_TOKEN')]) {
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN'
                    }
                }
            }
        }

        stage('Préparation et mise en place sur Nexus') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIALS, usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        sh './mvnw deploy -DaltDeploymentRepository=nexus::default::$NEXUS_URL'
                    }
                }
            }
        }

        stage('Création de l’image Docker') {
            steps {
                sh 'docker build -t your-dockerhub-user/spring-app:latest .'
            }
        }

        stage('Push de l’image sur DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                            docker push your-dockerhub-user/spring-app:latest
                        """
                    }
                }
            }
        }

        stage('Lancement avec docker-compose') {
            steps {
                sh 'docker-compose up -d'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            junit '**/target/surefire-reports/*.xml'
        }
    }
}

