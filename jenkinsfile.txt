pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = '777'  // ID des credentials DockerHub
        SONARQUBE_ENV = 'SonarQube-Server'          // Config SonarQube dans Jenkins
        NEXUS_URL = 'http://192.168.33.10:9096/repository/maven-releases/'
        NEXUS_CREDENTIALS = '999'           // ID des credentials Nexus
    }

    stages {


        stage('Compilation') {
            steps {
                  sh '''
                    chmod +x mvnw
                    ./mvnw clean package -DskipTests
                '''
            
            }
        }

        stage('Lancement des tests unitaires') {
            steps {
                sh './mvnw test'
            }
        }
        stage('Analyse de qualité SonarQube') {
                                steps {
                        withSonarQubeEnv('SonarQube-Server') { // Ensure this matches your SonarQube server configuration
                            withCredentials([
                                usernamePassword(credentialsId: '888', usernameVariable: 'SONAR_USER', passwordVariable: 'SONAR_PASS')
                            ]) {
                                sh 'mvn sonar:sonar -Dsonar.login=$SONAR_USER -Dsonar.password=$SONAR_PASS'
                            }
                        }
                    }
                }

        stage('Création de l’image Docker') {
                    steps {
                        sh 'docker build -t getghosted/yassine-spring-app:latest .'
                    }
                }

        stage('Push de l’image sur DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                            docker push getghosted/yassine-spring-app:latest
                        """
                    }
                }
            }
        }



        
}
}
